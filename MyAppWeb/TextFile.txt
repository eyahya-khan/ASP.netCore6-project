******* Database connection with code first approach ******

step-1: create Model
        model ==>>> program.cs

step-2: create dbContext
        Date ==>>> ApplicationDbContext.cs
        public DbSet<modelname> tablename { get; set; }

step-3:appsettings.json
"ConnectionStrings": {
    "DefaultConnection": "Server=(localdb)\\mssqllocaldb;Database=MyAppWebDB;Trusted_Connection=True;MultipleActiveResultSets=true"
  }

step-4: register db context file to program.cs

builder.Services.AddDbContext<ApplicationDbContext>(options =>
{
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection"));
});

step-5: install 3 package
        right click on app file >>> choose "Manage NuGet packages..." ans install
        1. Microsoft.EntityFrameworkCore(6.0.3)
        2. Microsoft.EntityFrameworkCoreSqlServer(6.0.3)
        3. Microsoft.EntityFrameworkCoreTools(6.0.3)

step-6: create database
        tools>>>NuGet Package Manager >>> Package Manager Console
        add-migration AddCategoryToDatabase
        update-database

        //remove-migration

step-7: Check connection of database

        tools >>> connect to database
        server name: (localdb)\mssqllocaldb




******* Razor page *******

step-1: create ragor page view (skaffolding)
  controller >>> right click on IActionResult index() >>> add view >>> razor view (empty)>>> add




******* Bootswatck theme *******

step-1: www.bootswatch.com

step-2: select one theme like "superhero" >>> click download >>> copy all code

step-3: goto wwwroot >>> css >>> right click >>> add >>> stylesheet >>> paste

step-4: goto view >>> Shared >>> _Layout.cshtml >>> <link rel="stylesheet" href="~/css/Superherobootswatch.css" />




******* Bootstrap Icon *******

step-1: https://icons.getbootstrap.com/icons/plus-circle/

step-2: copy Icon font >>> view >>> category >>> index.cshtml >>> paste

step-3: goto view >>> Shared >>> _Layout.cshtml >>> <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">




******* Server side validation *******

step-1: In CategoryController.ch line 35  'if (ModelState.IsValid){ }' is used to validate empty value entry in database.

step-2: In views/Category/Create.cshtml file line 5, 15, 20



******* client side validation *******

step-1: In views/Category/Create.cshtml file line 27

step-2: _ValidationScriptspartial from shared/_ValidationScriptspartial.cshtml

step-3: Model/Category.cs file line 14 to display "Display Order"




******* Temp data *******

step-1: Tempdata is used to display msg only for one time

step-2: In CategoryController.cs file line 39, 69, 102




******* Toastr Notification *******

step-1: In Shared/_Layout.cshtml file add  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css"/>

step-2: In  Shared/_Notification.cshtml




******* Devide in different project structure *******

step-1: Right click on solution 'MyApp' >>> add >>> new project >>> class libray >>> MyAppModels

step-2: move model folder into MyAppModels and move all file: Category.cs & ErrorViewModel.cs

step-3: reapeat step-1 with MyAppDataAccessLayer and move "Data" & "Migrations" folder and adjust namespace, update Entity Framework packages and fix the error.




******* Repository pattern (minimize the repeatation of code) *******

step-1: Create folder MyApp.DataAccessLayer >>> Infrastructure >>> IRepository and Repository




******* Scooped repository *******

step-1: In program.cs file add 'builder.Services.AddScoped<IUnitOfWork,UnitOfWork>();' 

step-2: In CategoryController.cs file, we use scooped instead of AddDbContext




******* Migrations namespace  *******

step-1: Check migrations all file namespace is correct




******* ASP.NET area  *******

(Area are two type: Admin and Customer)

step-1: Right click on MyAppWeb >>> add >>> new skaffolded item >>> MVC area >>> Admin

step-2: Right click on Area >>> add >>> new skaffolded item >>> MVC area >>> Customer

step-3: In Program.cs >>> pattern: "{area=Customer}/{controller=Home}/{action=Index}/{id?}");

step-4: As because we made Data & Model folder before, so delete Data & Model folder from both Adminb & Customer

step-5: Move Category folder, _ViewImports.cshtml, _ViewStart.cshtml from Views folder to Admin >>> Views and Home folder, _ViewImports.cshtml, _ViewStart.cshtml from Views folder to Customer >>> Views

step-6: Move Controllers/Category.cs file into Admin >>> Controllers and Controllers/Home.cs file to Customer >>> Controllers

step-7: In Shared/_Layout.cshtml update asp-area="Admin" & asp-area="Customer"

step-8: In HomeController.cs & CategoryController.cs add [Area("Customer")] & [Area("Admin")] after namespace



// New product add
******* Product class & product table  *******

Step-1: Right click on MyAppModels >>> add >>> class >>> product.cs

step-2: Data >>> public DbSet<Product> Product { get; set; }

step-3: tools >>> NuGet Package Manager >>> Package Manager Console >>> Default project: MyApp.DataAccessLayer
        add-migration AddProduct
        update-database




******* Product & IProduct repository  *******

step-1: Create IProdctRepository.cs & ProductRepository.cs into infrastructure/IRepository and infrastructure/Repository

step-2: Add 'IProductRepository Product { get; }' into Repository/IUnitOfWork.cs

step-3: Change in UnitOfWork.cs file also.

step-4: Update method should be change in CategoryRepository.cs & ProductRepository.cs